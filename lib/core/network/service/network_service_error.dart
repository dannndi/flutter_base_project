import 'package:dio/dio.dart';
import 'package:base_project/core/constant/network/failure.dart';
import 'package:base_project/core/constant/network/network_exception.dart';
import 'package:equatable/equatable.dart';

class NetworkServiceError extends Equatable implements Exception {
  /// error code from network
  final int? statusCode;

  /// status code from response
  final int? code;

  /// error message
  final String? message;

  /// type of failure, primarily will be generated by fromDioException
  /// by transforming thrown error into failure
  final Failure? failure;

  /// reason why the exception is thrown
  final NetworkExceptionType exceptionType;

  /// data that's sent by the thrown error, usually for backend
  /// JSON body response when they send error response
  final dynamic data;

  NetworkServiceError({
    this.statusCode = 500,
    this.code = 500,
    this.message = "",
    this.exceptionType = NetworkExceptionType.unknown,
    this.data,
    Failure? failure,
  }) : failure = failure ?? NetworkFailure(message ?? "");

  factory NetworkServiceError.fromDioException(dynamic error) {
    if (error is DioException) {
      final jsonData = (error.response?.data is Map<String, dynamic>)
          ? error.response?.data as Map<String, dynamic>
          : {"status": 500, "message": "Server Error"};

      switch (error.type) {
        case DioExceptionType.cancel:
          return NetworkServiceError(
            statusCode: error.response?.statusCode,
            code: jsonData["status"] ?? 500,
            message: "Request cancelled",
            exceptionType: NetworkExceptionType.cancel,
          );
        case DioExceptionType.connectionTimeout:
          return NetworkServiceError(
            statusCode: error.response?.statusCode,
            code: jsonData["status"] ?? 500,
            message: "Connection Timeout",
            exceptionType: NetworkExceptionType.connectionTimeout,
          );
        case DioExceptionType.sendTimeout:
          return NetworkServiceError(
            statusCode: error.response?.statusCode,
            code: jsonData["status"] ?? 500,
            message: "Failed to send due to time out",
            exceptionType: NetworkExceptionType.sendTimeout,
          );
        case DioExceptionType.receiveTimeout:
          return NetworkServiceError(
            statusCode: error.response?.statusCode,
            code: jsonData["status"] ?? 500,
            message: "Failed to receive due to time out",
            exceptionType: NetworkExceptionType.receiveTimeout,
          );
        case DioExceptionType.badCertificate:
          return NetworkServiceError(
            statusCode: error.response?.statusCode,
            code: jsonData["status"] ?? 500,
            message: "Bad certificate",
            exceptionType: NetworkExceptionType.badCertificate,
          );
        case DioExceptionType.badResponse:
          if (error.response?.statusCode == 401) {
            return NetworkServiceError(
              statusCode: error.response?.statusCode,
              code: jsonData["status"] ?? 500,
              message: "Unauthorize",
              exceptionType: NetworkExceptionType.unauthorize,
              failure: const UnAuthorizedFailure("Unauthorize"),
              data: jsonData,
            );
          } else {
            return NetworkServiceError(
              statusCode: error.response?.statusCode,
              code: jsonData["status"] ?? 500,
              message: "Bad response",
              exceptionType: NetworkExceptionType.badResponse,
              data: jsonData,
            );
          }
        case DioExceptionType.connectionError:
          return NetworkServiceError(
            statusCode: error.response?.statusCode,
            code: jsonData["status"] ?? 500,
            message: "Connection error",
            exceptionType: NetworkExceptionType.connectionError,
          );
        case DioExceptionType.unknown:
          return NetworkServiceError(
            statusCode: 999,
            code: 999,
            message: "Unknown error",
            exceptionType: NetworkExceptionType.unknown,
          );
      }
    }

    return NetworkServiceError(
      code: 999,
      statusCode: 999,
      message: "Unknown error",
      exceptionType: NetworkExceptionType.unknown,
    );
  }

  factory NetworkServiceError.fromParsingException(error) {
    return NetworkServiceError(
      exceptionType: NetworkExceptionType.serialization,
      message: 'Failed to parse network response to model or vice versa',
    );
  }

  @override
  List<Object?> get props => [statusCode, code, message, exceptionType, data];
}
